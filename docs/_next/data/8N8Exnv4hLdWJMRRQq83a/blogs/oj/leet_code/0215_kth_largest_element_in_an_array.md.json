{"pageProps":{"blog":{"name":"0215_kth_largest_element_in_an_array.md","categories":["oj","leet_code"],"content":"\n# Kth Largest Element in an Array\n\n## Description\n\n[doc](https://leetcode.com/problems/kth-largest-element-in-an-array/)\n\n## Solutions\n\n### First idea\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  // should not use the sort method directly\n  // since by default, sort will convert the value to string to compare between each other\n  // refer to [compareFunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description)\n  return nums.sort((a, b) => a - b)[nums.length - k]\n}\n```\n\n- Time Complexity: O(n\\*logn) if using quick sort\n- Space Complexity: O(1)\n\n### Priority Queue\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  const priorityQueue = []\n\n  for (const num of nums) {\n    const last = priorityQueue[k - 1]\n    if (last === undefined || num > last) {\n      last === undefined\n        ? priorityQueue.push(num)\n        : (priorityQueue[k - 1] = num)\n\n      priorityQueue.sort((a, b) => b - a)\n    }\n  }\n\n  return priorityQueue[k - 1]\n}\n```\n\n\nTODO: add quick sort one\n### Quick Sort\n","meta":{"title":"Kth Largest Element in an Array","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Kth Largest Element in an Array</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First idea</h3>\n<pre><code>/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  // should not use the sort method directly\n  // since by default, sort will convert the value to string to compare between each other\n  // refer to [compareFunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description)\n  return nums.sort((a, b) => a - b)[nums.length - k]\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n*logn) if using quick sort</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n<h3>Priority Queue</h3>\n<pre><code>/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  const priorityQueue = []\n\n  for (const num of nums) {\n    const last = priorityQueue[k - 1]\n    if (last === undefined || num > last) {\n      last === undefined\n        ? priorityQueue.push(num)\n        : (priorityQueue[k - 1] = num)\n\n      priorityQueue.sort((a, b) => b - a)\n    }\n  }\n\n  return priorityQueue[k - 1]\n}\n</code></pre>\n<p>TODO: add quick sort one</p>\n<h3>Quick Sort</h3>\n"},"__N_SSG":true}
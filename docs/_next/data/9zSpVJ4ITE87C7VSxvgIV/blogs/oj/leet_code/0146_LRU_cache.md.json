{"pageProps":{"blog":{"name":"0146_LRU_cache.md","categories":["oj","leet_code"],"content":"\n# LRU Cache\n\n## Description\n\n[doc](https://leetcode.com/problems/lru-cache/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * @param {number} capacity\n */\nvar LRUCache = function (capacity) {\n  this.capacity = capacity\n\n  this.LRUCache = new Map()\n  this.low = 0\n  this.high = 0\n\n  this.cache = new Map()\n}\n\nLRUCache.prototype.getLRUKey = function () {\n  while (!this.LRUCache.has(this.low) && this.low < this.high) {\n    this.low++\n  }\n\n  return this.LRUCache.get(this.low)\n}\n\nLRUCache.prototype.remove = function (key) {\n  const cur = this.cache.get(key)\n  if (cur) {\n    this.cache.delete(key)\n    this.LRUCache.delete(cur.cacheKey)\n  }\n\n  return cur\n}\n\nLRUCache.prototype.add = function (key, value) {\n  this.cache.set(key, { cacheKey: this.high, value })\n  this.LRUCache.set(this.high++, key)\n}\n\n/**\n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function (key) {\n  if (!this.cache.has(key)) {\n    return -1\n  }\n\n  const prev = this.remove(key)\n  this.add(key, prev.value)\n  return prev.value\n}\n\n/**\n * @param {number} key\n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function (key, value) {\n  if (this.cache.has(key)) {\n    this.remove(key)\n  }\n\n  if (this.cache.size >= this.capacity) {\n    const LRUKey = this.getLRUKey()\n    this.remove(LRUKey)\n  }\n\n  this.add(key, value)\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n```\n","meta":{"title":"LRU Cache","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>LRU Cache</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/lru-cache/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * @param {number} capacity\n */\nvar LRUCache = function (capacity) {\n  this.capacity = capacity\n\n  this.LRUCache = new Map()\n  this.low = 0\n  this.high = 0\n\n  this.cache = new Map()\n}\n\nLRUCache.prototype.getLRUKey = function () {\n  while (!this.LRUCache.has(this.low) &#x26;&#x26; this.low &#x3C; this.high) {\n    this.low++\n  }\n\n  return this.LRUCache.get(this.low)\n}\n\nLRUCache.prototype.remove = function (key) {\n  const cur = this.cache.get(key)\n  if (cur) {\n    this.cache.delete(key)\n    this.LRUCache.delete(cur.cacheKey)\n  }\n\n  return cur\n}\n\nLRUCache.prototype.add = function (key, value) {\n  this.cache.set(key, { cacheKey: this.high, value })\n  this.LRUCache.set(this.high++, key)\n}\n\n/**\n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function (key) {\n  if (!this.cache.has(key)) {\n    return -1\n  }\n\n  const prev = this.remove(key)\n  this.add(key, prev.value)\n  return prev.value\n}\n\n/**\n * @param {number} key\n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function (key, value) {\n  if (this.cache.has(key)) {\n    this.remove(key)\n  }\n\n  if (this.cache.size >= this.capacity) {\n    const LRUKey = this.getLRUKey()\n    this.remove(LRUKey)\n  }\n\n  this.add(key, value)\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n</code></pre>\n"},"__N_SSG":true}
{"pageProps":{"blog":{"name":"0116_populating_next_right_pointers_in_each_node.md","categories":["oj","leet_code"],"content":"\n# Populating Next Right Pointers in Each Node\n\n## Description\n\n[doc](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * // Definition for a Node.\n * function Node(val, left, right, next) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : right;\n *    this.next = next === undefined ? null : next;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {Node}\n */\nvar connect = function (root) {\n  if (!root) {\n    return root\n  }\n\n  let queue = [root]\n  let nextQueue = []\n  let prev = null\n\n  while (queue.length) {\n    const tail = queue.shift()\n    tail.next = prev\n    prev = tail\n\n    tail.right && nextQueue.push(tail.right)\n    tail.left && nextQueue.push(tail.left)\n\n    if (queue.length === 0) {\n      queue = nextQueue\n      nextQueue = []\n      prev = null\n    }\n  }\n\n  return root\n}\n```\n","meta":{"title":"Populating Next Right Pointers in Each Node","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Populating Next Right Pointers in Each Node</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * // Definition for a Node.\n * function Node(val, left, right, next) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : right;\n *    this.next = next === undefined ? null : next;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {Node}\n */\nvar connect = function (root) {\n  if (!root) {\n    return root\n  }\n\n  let queue = [root]\n  let nextQueue = []\n  let prev = null\n\n  while (queue.length) {\n    const tail = queue.shift()\n    tail.next = prev\n    prev = tail\n\n    tail.right &#x26;&#x26; nextQueue.push(tail.right)\n    tail.left &#x26;&#x26; nextQueue.push(tail.left)\n\n    if (queue.length === 0) {\n      queue = nextQueue\n      nextQueue = []\n      prev = null\n    }\n  }\n\n  return root\n}\n</code></pre>\n"},"__N_SSG":true}
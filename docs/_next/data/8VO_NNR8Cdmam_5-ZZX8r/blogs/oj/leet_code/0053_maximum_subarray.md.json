{"pageProps":{"blog":{"name":"0053_maximum_subarray.md","categories":["oj","leet_code"],"content":"\n# Maximum Subarray\n\n## Description\n\n[doc](https://leetcode.com/problems/maximum-subarray/)\n\n## Solutions\n\n### Dynamic Programing\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function (nums) {\n  let sum = (max = nums[0])\n\n  for (let i = 1; i < nums.length; i++) {\n    const sumWithCurrent = sum + nums[i]\n\n    sum = sumWithCurrent < nums[i] ? nums[i] : sumWithCurrent\n    max = sum > max ? sum : max\n  }\n\n  return max\n}\n```\n","meta":{"title":"Maximum Subarray","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Maximum Subarray</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/maximum-subarray/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>Dynamic Programing</h3>\n<pre><code>/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function (nums) {\n  let sum = (max = nums[0])\n\n  for (let i = 1; i &#x3C; nums.length; i++) {\n    const sumWithCurrent = sum + nums[i]\n\n    sum = sumWithCurrent &#x3C; nums[i] ? nums[i] : sumWithCurrent\n    max = sum > max ? sum : max\n  }\n\n  return max\n}\n</code></pre>\n"},"__N_SSG":true}
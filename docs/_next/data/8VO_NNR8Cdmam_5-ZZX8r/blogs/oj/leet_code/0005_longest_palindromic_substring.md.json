{"pageProps":{"blog":{"name":"0005_longest_palindromic_substring.md","categories":["oj","leet_code"],"content":"\n# Longest Palindromic Substring\n\n## Description\n\n[doc](https://github.com/afatcoder/LeetcodeTop/blob/master/bytedance/frontend.md)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  let result = []\n\n  for (let i = 0; i < s.length; i++) {\n    let j = i\n    while ((j = s.indexOf(s.charAt(i), j + 1)) > 0) {\n      let curR = j\n\n      if (j <= i) {\n        continue\n      }\n\n      let curL = i\n\n      while (curL++ < curR--) {\n        if (s.charAt(curL) !== s.charAt(curR)) {\n          break\n        }\n      }\n\n      if (curL >= curR) {\n        result.push(s.substring(i, j + 1))\n      }\n    }\n  }\n\n  return result.reduce(\n    (maxStr, cur) => (maxStr.length < cur.length ? cur : maxStr),\n    s.charAt(0)\n  )\n}\n```\n\n- Time Complexity: O(n^3)\n- Space Complexity: O(n \\* n)\n\n### Refined Version\n\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  if (s.length < 2) {\n    return s[0]\n  }\n\n  let start = 0\n  let end = 0\n\n  function expendForPalindromic(i, j) {\n    while (i >= 0 && j < s.length && s.charAt(i) === s.charAt(j)) {\n      i--\n      j++\n    }\n\n    if (end - start < j - i - 1) {\n      start = i + 1\n      end = j\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    expendForPalindromic(i, i)\n    expendForPalindromic(i, i + 1)\n  }\n\n  return s.substring(start, end)\n}\n```\n\n- Time Complexity: O(n^2)\n- Space Complexity: O(1)\n","meta":{"title":"Longest Palindromic Substring","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Longest Palindromic Substring</h1>\n<h2>Description</h2>\n<p><a href=\"https://github.com/afatcoder/LeetcodeTop/blob/master/bytedance/frontend.md\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  let result = []\n\n  for (let i = 0; i &#x3C; s.length; i++) {\n    let j = i\n    while ((j = s.indexOf(s.charAt(i), j + 1)) > 0) {\n      let curR = j\n\n      if (j &#x3C;= i) {\n        continue\n      }\n\n      let curL = i\n\n      while (curL++ &#x3C; curR--) {\n        if (s.charAt(curL) !== s.charAt(curR)) {\n          break\n        }\n      }\n\n      if (curL >= curR) {\n        result.push(s.substring(i, j + 1))\n      }\n    }\n  }\n\n  return result.reduce(\n    (maxStr, cur) => (maxStr.length &#x3C; cur.length ? cur : maxStr),\n    s.charAt(0)\n  )\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n^3)</li>\n<li>Space Complexity: O(n * n)</li>\n</ul>\n<h3>Refined Version</h3>\n<pre><code>/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  if (s.length &#x3C; 2) {\n    return s[0]\n  }\n\n  let start = 0\n  let end = 0\n\n  function expendForPalindromic(i, j) {\n    while (i >= 0 &#x26;&#x26; j &#x3C; s.length &#x26;&#x26; s.charAt(i) === s.charAt(j)) {\n      i--\n      j++\n    }\n\n    if (end - start &#x3C; j - i - 1) {\n      start = i + 1\n      end = j\n    }\n  }\n\n  for (let i = 0; i &#x3C; s.length; i++) {\n    expendForPalindromic(i, i)\n    expendForPalindromic(i, i + 1)\n  }\n\n  return s.substring(start, end)\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n^2)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n"},"__N_SSG":true}
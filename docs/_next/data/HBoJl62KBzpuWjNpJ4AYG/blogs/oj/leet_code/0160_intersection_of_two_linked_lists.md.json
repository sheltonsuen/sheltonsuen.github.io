{"pageProps":{"blog":{"name":"0160_intersection_of_two_linked_lists.md","categories":["oj","leet_code"],"content":"\n# Intersection of Two Linked Lists\n\n## Description\n\n[doc](https://leetcode.com/problems/intersection-of-two-linked-lists/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function (headA, headB) {\n  let curA = headA\n\n  while (curA) {\n    let curB = headB\n\n    while (curB) {\n      if (Object.is(curA, curB)) {\n        return curA\n      }\n\n      curB = curB.next\n    }\n\n    curA = curA.next\n  }\n\n  return null\n}\n```\n\n- Time Complexity: O(n^2)\n- Space Complexity: O(1)\n\n### Hash Version\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function (headA, headB) {\n  const nodesOfB = new WeakSet()\n  let cur = headB\n\n  while (cur) {\n    nodesOfB.add(cur)\n    cur = cur.next\n  }\n\n  cur = headA\n  while (cur) {\n    if (nodesOfB.has(cur)) {\n      return cur\n    }\n\n    cur = cur.next\n  }\n\n  return null\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n","meta":{"title":"Intersection of Two Linked Lists","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Intersection of Two Linked Lists</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function (headA, headB) {\n  let curA = headA\n\n  while (curA) {\n    let curB = headB\n\n    while (curB) {\n      if (Object.is(curA, curB)) {\n        return curA\n      }\n\n      curB = curB.next\n    }\n\n    curA = curA.next\n  }\n\n  return null\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n^2)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n<h3>Hash Version</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function (headA, headB) {\n  const nodesOfB = new WeakSet()\n  let cur = headB\n\n  while (cur) {\n    nodesOfB.add(cur)\n    cur = cur.next\n  }\n\n  cur = headA\n  while (cur) {\n    if (nodesOfB.has(cur)) {\n      return cur\n    }\n\n    cur = cur.next\n  }\n\n  return null\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n"},"__N_SSG":true}
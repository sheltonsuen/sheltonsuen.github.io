{"pageProps":{"blog":{"name":"0003_longest_substring.md","categories":["oj","leet_code"],"content":"\n# Longest Substring Without Repeating Characters\n\n## Description\n\n[original description](https://leetcode.com/problems/longest-substring-without-repeating-characters/)\n\n## Solutions\n\n### First Idea\n\none scaning\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n  let result = 0;\n\n  let cache = {};\n  let lengthCount = 0;\n  let start = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    const ch = s.charAt(i);\n    const index = cache[ch];\n\n    if (index != undefined) {\n      for (let j = start; j <= index; j++) {\n        delete cache[s.charAt(j)];\n      }\n\n      lengthCount = lengthCount - (index - start + 1);\n      start = index + 1;\n    }\n\n    lengthCount++;\n    cache[ch] = i;\n    result = result < lengthCount ? lengthCount : result;\n  }\n\n  return result;\n};\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n\n### Sliding Window\n\nMy first solution for this problem is similar to Sliding Window, check [doc](https://www.code-recipe.com/post/longest-substring-without-repeating-characters) for details.\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n  let max = 0;\n  let cachedKeys = {};\n\n  let start = 0; // the sliding window\n  let end = 0;\n\n  for (; end < s.length; end++) {\n    const cachedIndex = cachedKeys[s[end]];\n\n    if (cachedIndex !== undefined) {\n      const len = end - start;\n      max = max < len ? len : max;\n\n      for (let j = start; j <= cachedIndex; j++) {\n        delete cachedKeys[s.charAt(j)];\n      }\n\n      start = cachedIndex + 1;\n    }\n\n    cachedKeys[s.charAt(end)] = end;\n  }\n\n  return max < end - start ? end - start : max;\n};\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n","meta":{"title":"Longest Substring Without Repeating Characters","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Longest Substring Without Repeating Characters</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\">original description</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<p>one scaning</p>\n<pre><code>/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n  let result = 0;\n\n  let cache = {};\n  let lengthCount = 0;\n  let start = 0;\n\n  for (let i = 0; i &#x3C; s.length; i++) {\n    const ch = s.charAt(i);\n    const index = cache[ch];\n\n    if (index != undefined) {\n      for (let j = start; j &#x3C;= index; j++) {\n        delete cache[s.charAt(j)];\n      }\n\n      lengthCount = lengthCount - (index - start + 1);\n      start = index + 1;\n    }\n\n    lengthCount++;\n    cache[ch] = i;\n    result = result &#x3C; lengthCount ? lengthCount : result;\n  }\n\n  return result;\n};\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n<h3>Sliding Window</h3>\n<p>My first solution for this problem is similar to Sliding Window, check <a href=\"https://www.code-recipe.com/post/longest-substring-without-repeating-characters\">doc</a> for details.</p>\n<pre><code>/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n  let max = 0;\n  let cachedKeys = {};\n\n  let start = 0; // the sliding window\n  let end = 0;\n\n  for (; end &#x3C; s.length; end++) {\n    const cachedIndex = cachedKeys[s[end]];\n\n    if (cachedIndex !== undefined) {\n      const len = end - start;\n      max = max &#x3C; len ? len : max;\n\n      for (let j = start; j &#x3C;= cachedIndex; j++) {\n        delete cachedKeys[s.charAt(j)];\n      }\n\n      start = cachedIndex + 1;\n    }\n\n    cachedKeys[s.charAt(end)] = end;\n  }\n\n  return max &#x3C; end - start ? end - start : max;\n};\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n"},"__N_SSG":true}
{"pageProps":{"blog":{"name":"0102_binary_tree_level_order_traversal.md","categories":["oj","leet_code"],"content":"\n# Binary Tree Level Order Traversal\n\n## Description\n\n[doc](https://leetcode.com/problems/binary-tree-level-order-traversal/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (!root) {\n    return []\n  }\n\n  let result = []\n  let curLevel = []\n\n  let curQueue = [root]\n  let nextQueue = []\n\n  while (curQueue.length) {\n    const cur = curQueue.shift()\n\n    curLevel.push(cur.val)\n    cur.left && nextQueue.push(cur.left)\n    cur.right && nextQueue.push(cur.right)\n\n    if (!curQueue.length) {\n      curQueue = nextQueue\n      nextQueue = []\n      result.push(curLevel)\n      curLevel = []\n    }\n  }\n\n  return result\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n","meta":{"title":"Binary Tree Level Order Traversal","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Binary Tree Level Order Traversal</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/binary-tree-level-order-traversal/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (!root) {\n    return []\n  }\n\n  let result = []\n  let curLevel = []\n\n  let curQueue = [root]\n  let nextQueue = []\n\n  while (curQueue.length) {\n    const cur = curQueue.shift()\n\n    curLevel.push(cur.val)\n    cur.left &#x26;&#x26; nextQueue.push(cur.left)\n    cur.right &#x26;&#x26; nextQueue.push(cur.right)\n\n    if (!curQueue.length) {\n      curQueue = nextQueue\n      nextQueue = []\n      result.push(curLevel)\n      curLevel = []\n    }\n  }\n\n  return result\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n"},"__N_SSG":true}
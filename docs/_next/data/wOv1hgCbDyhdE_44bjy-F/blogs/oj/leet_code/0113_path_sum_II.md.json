{"pageProps":{"blog":{"name":"0113_path_sum_II.md","categories":["oj","leet_code"],"content":"\n# Path Sum II\n\n## Description\n\n[doc](https://leetcode.com/problems/path-sum-ii/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {number[][]}\n */\nvar pathSum = function (root, targetSum) {\n  if (root === null) {\n    return []\n  }\n\n  const leftVal = targetSum - root.val\n  if (root.left === null && root.right === null) {\n    return leftVal ? [] : [[root.val]]\n  }\n\n  const left = pathSum(root.left, leftVal)\n  const right = pathSum(root.right, leftVal)\n\n  return [...left, ...right].map((v) => [root.val, ...v])\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n\n### BFS\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {number[][]}\n */\nvar pathSum = function (root, targetSum) {\n  if (root === null) {\n    return []\n  }\n\n  root.vals = [root.val]\n  let queue = [root]\n  let result = []\n\n  while (queue.length) {\n    const cur = queue.shift()\n\n    if (cur.left === null && cur.right === null && cur.val === targetSum) {\n      result.push(cur.vals)\n      continue\n    }\n\n    if (cur.left) {\n      cur.left.vals = [...cur.vals, cur.left.val]\n      cur.left.val += cur.val\n      queue.push(cur.left)\n    }\n\n    if (cur.right) {\n      cur.right.vals = [...cur.vals, cur.right.val]\n      cur.right.val += cur.val\n      queue.push(cur.right)\n    }\n  }\n\n  return result\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(nlogn)\n","meta":{"title":"Path Sum II","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Path Sum II</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/path-sum-ii/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {number[][]}\n */\nvar pathSum = function (root, targetSum) {\n  if (root === null) {\n    return []\n  }\n\n  const leftVal = targetSum - root.val\n  if (root.left === null &#x26;&#x26; root.right === null) {\n    return leftVal ? [] : [[root.val]]\n  }\n\n  const left = pathSum(root.left, leftVal)\n  const right = pathSum(root.right, leftVal)\n\n  return [...left, ...right].map((v) => [root.val, ...v])\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n<h3>BFS</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {number[][]}\n */\nvar pathSum = function (root, targetSum) {\n  if (root === null) {\n    return []\n  }\n\n  root.vals = [root.val]\n  let queue = [root]\n  let result = []\n\n  while (queue.length) {\n    const cur = queue.shift()\n\n    if (cur.left === null &#x26;&#x26; cur.right === null &#x26;&#x26; cur.val === targetSum) {\n      result.push(cur.vals)\n      continue\n    }\n\n    if (cur.left) {\n      cur.left.vals = [...cur.vals, cur.left.val]\n      cur.left.val += cur.val\n      queue.push(cur.left)\n    }\n\n    if (cur.right) {\n      cur.right.vals = [...cur.vals, cur.right.val]\n      cur.right.val += cur.val\n      queue.push(cur.right)\n    }\n  }\n\n  return result\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(nlogn)</li>\n</ul>\n"},"__N_SSG":true}
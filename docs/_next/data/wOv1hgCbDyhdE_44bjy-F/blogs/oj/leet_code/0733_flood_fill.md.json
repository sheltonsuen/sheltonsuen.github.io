{"pageProps":{"blog":{"name":"0733_flood_fill.md","categories":["oj","leet_code"],"content":"\n# Flood Fill\n\n## Description\n\n[doc](https://leetcode.com/problems/flood-fill/)\n\n## Solutions\n\n### BFS\n\n```javascript\nconst DIRS = [\n  [0, 1],\n  [1, 0],\n  [0, -1],\n  [-1, 0],\n]\n\n/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */\nvar floodFill = function (image, sr, sc, newColor) {\n  let queue = [[sr, sc]]\n  let visited = Array(image.length)\n    .fill()\n    .map(() => [])\n  const color = image[sr][sc]\n  visited[sr][sc] = true\n  image[sr][sc] = newColor\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    DIRS.forEach(([_x, _y]) => {\n      const [newX, newY] = [x + _x, y + _y]\n\n      if (image[newX]?.[newY] === color && !visited[newX]?.[newY]) {\n        image[newX][newY] = newColor\n        visited[newX][newY] = true\n        queue.push([newX, newY])\n      }\n    })\n  }\n\n  return image\n}\n```\n\n### DFS\n\n```javascript\nconst DIRS = [\n  [0, 1],\n  [1, 0],\n  [0, -1],\n  [-1, 0],\n]\n\n/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */\nvar floodFill = function (image, sr, sc, newColor) {\n  let stack = [[sr, sc]]\n  let visited = Array(image.length)\n    .fill()\n    .map(() => [])\n\n  const color = image[sr][sc]\n  image[sr][sc] = newColor\n\n  while (stack.length) {\n    const [x, y] = stack.pop()\n\n    DIRS.forEach(([_x, _y]) => {\n      const [newX, newY] = [x + _x, y + _y]\n\n      if (image[newX]?.[newY] === color && !visited[newX]?.[newY]) {\n        image[newX][newY] = newColor\n        visited[newX][newY] = true\n        stack.push([newX, newY])\n      }\n    })\n  }\n\n  return image\n}\n```\n","meta":{"title":"Flood Fill","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Flood Fill</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/flood-fill/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>BFS</h3>\n<pre><code>const DIRS = [\n  [0, 1],\n  [1, 0],\n  [0, -1],\n  [-1, 0],\n]\n\n/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */\nvar floodFill = function (image, sr, sc, newColor) {\n  let queue = [[sr, sc]]\n  let visited = Array(image.length)\n    .fill()\n    .map(() => [])\n  const color = image[sr][sc]\n  visited[sr][sc] = true\n  image[sr][sc] = newColor\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    DIRS.forEach(([_x, _y]) => {\n      const [newX, newY] = [x + _x, y + _y]\n\n      if (image[newX]?.[newY] === color &#x26;&#x26; !visited[newX]?.[newY]) {\n        image[newX][newY] = newColor\n        visited[newX][newY] = true\n        queue.push([newX, newY])\n      }\n    })\n  }\n\n  return image\n}\n</code></pre>\n<h3>DFS</h3>\n<pre><code>const DIRS = [\n  [0, 1],\n  [1, 0],\n  [0, -1],\n  [-1, 0],\n]\n\n/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */\nvar floodFill = function (image, sr, sc, newColor) {\n  let stack = [[sr, sc]]\n  let visited = Array(image.length)\n    .fill()\n    .map(() => [])\n\n  const color = image[sr][sc]\n  image[sr][sc] = newColor\n\n  while (stack.length) {\n    const [x, y] = stack.pop()\n\n    DIRS.forEach(([_x, _y]) => {\n      const [newX, newY] = [x + _x, y + _y]\n\n      if (image[newX]?.[newY] === color &#x26;&#x26; !visited[newX]?.[newY]) {\n        image[newX][newY] = newColor\n        visited[newX][newY] = true\n        stack.push([newX, newY])\n      }\n    })\n  }\n\n  return image\n}\n</code></pre>\n"},"__N_SSG":true}
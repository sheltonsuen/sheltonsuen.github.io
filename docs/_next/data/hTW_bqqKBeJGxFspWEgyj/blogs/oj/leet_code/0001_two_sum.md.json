{"pageProps":{"blog":{"name":"0001_two_sum.md","categories":["oj","leet_code"],"content":"\n# Two Sum\n\n## Descrption\n\n[original description](https://leetcode.com/problems/two-sum/)\n\n## Solutions\n\n### Brute Force\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n  for (let i = 0; i < nums.length - 1; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] + nums[j] === target) {       // check every possible case\n        return [i, j];\n      }\n    }\n  }\n  return [-1, -1] // will never touch\n};\n```\n\n- Time Complexity: O(n^2)\n- Space Complexity: O(1)\n\n### Cache Diff by Map\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n  const cache = {}\n  for (let i = 0; i < nums.length; i++) {\n    const cachedIndex = cache[target - nums[i]];\n    if (cachedIndex !== undefined) {              // found cached diff, return directly\n      return [cachedIndex, i];        \n    }\n\n    cache[nums[i]] = i;                           // otherwise cache it for later use\n  }\n\n  return [-1, -1];\n};\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n\n","meta":{"title":"Two Sum","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Two Sum</h1>\n<h2>Descrption</h2>\n<p><a href=\"https://leetcode.com/problems/two-sum/\">original description</a></p>\n<h2>Solutions</h2>\n<h3>Brute Force</h3>\n<pre><code>/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n  for (let i = 0; i &#x3C; nums.length - 1; i++) {\n    for (let j = i + 1; j &#x3C; nums.length; j++) {\n      if (nums[i] + nums[j] === target) {       // check every possible case\n        return [i, j];\n      }\n    }\n  }\n  return [-1, -1] // will never touch\n};\n</code></pre>\n<ul>\n<li>Time Complexity: O(n^2)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n<h3>Cache Diff by Map</h3>\n<pre><code>/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n  const cache = {}\n  for (let i = 0; i &#x3C; nums.length; i++) {\n    const cachedIndex = cache[target - nums[i]];\n    if (cachedIndex !== undefined) {              // found cached diff, return directly\n      return [cachedIndex, i];        \n    }\n\n    cache[nums[i]] = i;                           // otherwise cache it for later use\n  }\n\n  return [-1, -1];\n};\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n"},"__N_SSG":true}
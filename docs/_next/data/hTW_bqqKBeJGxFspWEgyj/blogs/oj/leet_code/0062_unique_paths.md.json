{"pageProps":{"blog":{"name":"0062_unique_paths.md","categories":["oj","leet_code"],"content":"\n# Unique Paths\n\n## Description\n\n[doc](https://leetcode.com/problems/unique-paths/)\n\n## Solutions\n\n### [Time Exceeded] First Idea\n\n```javascript\nconst DIRS = [\n  [1, 0],\n  [0, 1],\n]\n\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  const [endX, endY] = [n - 1, m - 1]\n  let queue = [[0, 0]]\n  let pathCount = 0\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    if (x === endX && y === endY) {\n      pathCount++\n      continue\n    }\n\n    DIRS.forEach(([_x, _y]) => {\n      const newX = x + _x\n      const newY = y + _y\n\n      if (newX > endX || newY > endY) {\n        return\n      }\n\n      queue.push([newX, newY])\n    })\n  }\n\n  return pathCount\n}\n```\n\n- Time Complexity: O(?)\n- Space Complexty: O(1)\n\n### [Time Exceeded] Recursive Version\n\n```javascript\nconst DIRS = [\n  [-1, 0],\n  [0, -1],\n]\n\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  if (!(m - 1) && !(n - 1)) {\n    return 1\n  }\n\n  return DIRS.reduce((acc, [_x, _y]) => {\n    const newX = n + _x\n    const newY = m + _y\n\n    if (!newX || !newY) {\n      return acc\n    }\n\n    return acc + uniquePaths(newY, newX)\n  }, 0)\n}\n```\n\n### DP\n\n```javascript\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  let matrics = Array(n)\n    .fill(0)\n    .map(() => Array(m).fill(0))\n\n  for (let y = 0; y < m; y++) {\n    for (let x = 0; x < n; x++) {\n      if (!x && !y) {\n        matrics[x][y] = 1\n        continue\n      }\n\n      const left = matrics[x - 1]?.[y] ?? 0\n      const top = matrics[x]?.[y - 1] ?? 0\n      matrics[x][y] = left + top\n    }\n  }\n\n  return matrics[n - 1][m - 1]\n}\n```\n\n- Time Complexity: O(m \\* n)\n- Space Complexity: O(m \\* n)\n","meta":{"title":"Unique Paths","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Unique Paths</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/unique-paths/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>[Time Exceeded] First Idea</h3>\n<pre><code>const DIRS = [\n  [1, 0],\n  [0, 1],\n]\n\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  const [endX, endY] = [n - 1, m - 1]\n  let queue = [[0, 0]]\n  let pathCount = 0\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    if (x === endX &#x26;&#x26; y === endY) {\n      pathCount++\n      continue\n    }\n\n    DIRS.forEach(([_x, _y]) => {\n      const newX = x + _x\n      const newY = y + _y\n\n      if (newX > endX || newY > endY) {\n        return\n      }\n\n      queue.push([newX, newY])\n    })\n  }\n\n  return pathCount\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(?)</li>\n<li>Space Complexty: O(1)</li>\n</ul>\n<h3>[Time Exceeded] Recursive Version</h3>\n<pre><code>const DIRS = [\n  [-1, 0],\n  [0, -1],\n]\n\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  if (!(m - 1) &#x26;&#x26; !(n - 1)) {\n    return 1\n  }\n\n  return DIRS.reduce((acc, [_x, _y]) => {\n    const newX = n + _x\n    const newY = m + _y\n\n    if (!newX || !newY) {\n      return acc\n    }\n\n    return acc + uniquePaths(newY, newX)\n  }, 0)\n}\n</code></pre>\n<h3>DP</h3>\n<pre><code>/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  let matrics = Array(n)\n    .fill(0)\n    .map(() => Array(m).fill(0))\n\n  for (let y = 0; y &#x3C; m; y++) {\n    for (let x = 0; x &#x3C; n; x++) {\n      if (!x &#x26;&#x26; !y) {\n        matrics[x][y] = 1\n        continue\n      }\n\n      const left = matrics[x - 1]?.[y] ?? 0\n      const top = matrics[x]?.[y - 1] ?? 0\n      matrics[x][y] = left + top\n    }\n  }\n\n  return matrics[n - 1][m - 1]\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(m * n)</li>\n<li>Space Complexity: O(m * n)</li>\n</ul>\n"},"__N_SSG":true}
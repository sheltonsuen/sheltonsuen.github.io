{"pageProps":{"blog":{"name":"0226_invert_binary_tree.md","categories":["oj","leet_code"],"content":"\n# Invert Binary Tree\n\n## Description\n\n[doc](https://leetcode.com/problems/invert-binary-tree/)\n\n## Solutions\n\n### Recursive Version\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (!root) {\n    return root\n  }\n\n  let invertedLeft = invertTree(root.right)\n  root.right = invertTree(root.left)\n  root.left = invertedLeft\n\n  return root\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(1)\n\n### Queue Version\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (!root) {\n    return root\n  }\n\n  let queue = [root]\n\n  while (queue.length) {\n    const cur = queue.shift()\n\n    cur.left && queue.push(cur.left)\n    cur.right && queue.push(cur.right)\n\n    let left = cur.left\n    cur.left = cur.right\n    cur.right = left\n  }\n\n  return root\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexty: O(n)\n","meta":{"title":"Invert Binary Tree","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Invert Binary Tree</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/invert-binary-tree/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>Recursive Version</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (!root) {\n    return root\n  }\n\n  let invertedLeft = invertTree(root.right)\n  root.right = invertTree(root.left)\n  root.left = invertedLeft\n\n  return root\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n<h3>Queue Version</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (!root) {\n    return root\n  }\n\n  let queue = [root]\n\n  while (queue.length) {\n    const cur = queue.shift()\n\n    cur.left &#x26;&#x26; queue.push(cur.left)\n    cur.right &#x26;&#x26; queue.push(cur.right)\n\n    let left = cur.left\n    cur.left = cur.right\n    cur.right = left\n  }\n\n  return root\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexty: O(n)</li>\n</ul>\n"},"__N_SSG":true}
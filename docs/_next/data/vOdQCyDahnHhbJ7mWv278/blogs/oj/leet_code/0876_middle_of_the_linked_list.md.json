{"pageProps":{"blog":{"name":"0876_middle_of_the_linked_list.md","categories":["oj","leet_code"],"content":"\n# Middle of the Linked List\n\n## Description\n\n[doc](https://leetcode.com/problems/middle-of-the-linked-list/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function (head) {\n  let count = 0\n  let cur = head\n\n  while (cur !== null) {\n    count++\n    cur = cur.next\n  }\n\n  let middle = Math.floor(count / 2)\n  cur = head\n  while (middle > 0) {\n    cur = cur.next\n    middle--\n  }\n\n  return cur\n}\n```\n\n-- Time Complexity: O(n)\n-- Space Complexity: O(1)\n\n### Two Pointers\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function (head) {\n  let slow = (fast = head)\n\n  while (fast) {\n    fast = fast.next\n    if (!fast) {\n      break\n    }\n\n    fast = fast.next\n    slow = slow.next\n  }\n\n  return slow\n}\n```\n\n-- Time Complexity: O(n)\n-- Space Complexity: O(1)\n","meta":{"title":"Middle of the Linked List","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Middle of the Linked List</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/middle-of-the-linked-list/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function (head) {\n  let count = 0\n  let cur = head\n\n  while (cur !== null) {\n    count++\n    cur = cur.next\n  }\n\n  let middle = Math.floor(count / 2)\n  cur = head\n  while (middle > 0) {\n    cur = cur.next\n    middle--\n  }\n\n  return cur\n}\n</code></pre>\n<p>-- Time Complexity: O(n)\n-- Space Complexity: O(1)</p>\n<h3>Two Pointers</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function (head) {\n  let slow = (fast = head)\n\n  while (fast) {\n    fast = fast.next\n    if (!fast) {\n      break\n    }\n\n    fast = fast.next\n    slow = slow.next\n  }\n\n  return slow\n}\n</code></pre>\n<p>-- Time Complexity: O(n)\n-- Space Complexity: O(1)</p>\n"},"__N_SSG":true}
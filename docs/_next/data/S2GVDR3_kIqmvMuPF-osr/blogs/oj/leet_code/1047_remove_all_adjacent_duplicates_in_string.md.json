{"pageProps":{"blog":{"name":"1047_remove_all_adjacent_duplicates_in_string.md","categories":["oj","leet_code"],"content":"\n# Remove All Adjacent Duplicates In String\n\n## Description\n\n[doc](https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/)\n\n## Solutions\n\n### First Idea\n\n```javascript\nfunction indexOfDuplicated(str) {\n  let prev = 0\n  for (let i = 1; i < str.length; i++) {\n    if (str.charAt(prev) === str.charAt(i)) {\n      return prev\n    }\n\n    prev = i\n  }\n\n  return -1\n}\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function (s) {\n  let cur = s\n  let i = -1\n\n  while ((i = indexOfDuplicated(cur)) >= 0) {\n    cur = cur.replace(`${cur.charAt(i)}${cur.charAt(i)}`, '')\n  }\n\n  return cur\n}\n```\n\n-- Time Complexity: O(n^2)\n-- Space Complexity: O(n)\n\n### Refined Version\n\n```javascript\nfunction findDuplicatedChars(start, s) {\n  let prev = start\n  for (let i = start + 1; i < s.length; i++) {\n    if (s.charAt(prev) === s.charAt(i)) {\n      return prev\n    }\n\n    prev = i\n  }\n\n  return -1\n}\n\nfunction findRemovalRanges(start, s) {\n  let left = start\n  let right = start + 1\n\n  while (left >= 0 && right < s.length && s.charAt(left) === s.charAt(right)) {\n    left--\n    right++\n  }\n\n  return [left, right]\n}\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function (s) {\n  let removals = []\n  let index = 0\n\n  while ((index = findDuplicatedChars(index, s)) >= 0) {\n    removals.push(findRemovalRanges(index, s))\n  }\n\n  let result = []\n\n  for (let i = 0; i < s.length; i++) {\n    if (!removals.some(([s, e]) => i >= s && i <= e)) {\n      result.push(s.charAt(i))\n    }\n  }\n\n  return result.join('')\n}\n```\n","meta":{"title":"Remove All Adjacent Duplicates In String","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Remove All Adjacent Duplicates In String</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>function indexOfDuplicated(str) {\n  let prev = 0\n  for (let i = 1; i &#x3C; str.length; i++) {\n    if (str.charAt(prev) === str.charAt(i)) {\n      return prev\n    }\n\n    prev = i\n  }\n\n  return -1\n}\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function (s) {\n  let cur = s\n  let i = -1\n\n  while ((i = indexOfDuplicated(cur)) >= 0) {\n    cur = cur.replace(`${cur.charAt(i)}${cur.charAt(i)}`, '')\n  }\n\n  return cur\n}\n</code></pre>\n<p>-- Time Complexity: O(n^2)\n-- Space Complexity: O(n)</p>\n<h3>Refined Version</h3>\n<pre><code>function findDuplicatedChars(start, s) {\n  let prev = start\n  for (let i = start + 1; i &#x3C; s.length; i++) {\n    if (s.charAt(prev) === s.charAt(i)) {\n      return prev\n    }\n\n    prev = i\n  }\n\n  return -1\n}\n\nfunction findRemovalRanges(start, s) {\n  let left = start\n  let right = start + 1\n\n  while (left >= 0 &#x26;&#x26; right &#x3C; s.length &#x26;&#x26; s.charAt(left) === s.charAt(right)) {\n    left--\n    right++\n  }\n\n  return [left, right]\n}\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function (s) {\n  let removals = []\n  let index = 0\n\n  while ((index = findDuplicatedChars(index, s)) >= 0) {\n    removals.push(findRemovalRanges(index, s))\n  }\n\n  let result = []\n\n  for (let i = 0; i &#x3C; s.length; i++) {\n    if (!removals.some(([s, e]) => i >= s &#x26;&#x26; i &#x3C;= e)) {\n      result.push(s.charAt(i))\n    }\n  }\n\n  return result.join('')\n}\n</code></pre>\n"},"__N_SSG":true}
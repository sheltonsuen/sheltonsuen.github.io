{"pageProps":{"blog":{"name":"0695_max_area_of_island.md","categories":["oj","leet_code"],"content":"\n# Max Area of Island\n\n## Description\n\n[doc](https://leetcode.com/problems/max-area-of-island/)\n\n## Solutions\n\n### BFS\n\n```javascript\nconst DIRS = [\n  [0, 1],\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n] // top, right, bottom, left\n\nconst search = (grid, i, j) => {\n  let queue = [[i, j]]\n  let max = 1\n  grid[i][j] = 0\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    DIRS.forEach(([_x, _y]) => {\n      let newX = x + _x\n      let newY = y + _y\n      if (grid[newX] && grid[newX][newY]) {\n        grid[newX][newY] = 0\n        max += 1\n        queue.push([newX, newY])\n      }\n    })\n  }\n\n  return max\n}\n\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function (grid) {\n  let max = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        max = Math.max(search(grid, i, j), max)\n      }\n    }\n  }\n\n  return max\n}\n```\n\n### DFS\n\n```javascript\nconst DIRS = [\n  [0, 1],\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n] // top, right, bottom, left\n\nconst search = (grid, i, j) => {\n  let stack = [[i, j]]\n  grid[i][j] = 0\n\n  let count = 1\n\n  while (stack.length) {\n    const [x, y] = stack.pop()\n\n    DIRS.forEach(([_x, _y]) => {\n      let newX = x + _x\n      let newY = y + _y\n      if (grid[newX] && grid[newX][newY]) {\n        grid[newX][newY] = 0\n        count += 1\n        stack.push([newX, newY])\n      }\n    })\n  }\n\n  return count\n}\n\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function (grid) {\n  let max = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        max = Math.max(search(grid, i, j), max)\n      }\n    }\n  }\n\n  return max\n}\n```\n","meta":{"title":"Max Area of Island","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Max Area of Island</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/max-area-of-island/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>BFS</h3>\n<pre><code>const DIRS = [\n  [0, 1],\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n] // top, right, bottom, left\n\nconst search = (grid, i, j) => {\n  let queue = [[i, j]]\n  let max = 1\n  grid[i][j] = 0\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    DIRS.forEach(([_x, _y]) => {\n      let newX = x + _x\n      let newY = y + _y\n      if (grid[newX] &#x26;&#x26; grid[newX][newY]) {\n        grid[newX][newY] = 0\n        max += 1\n        queue.push([newX, newY])\n      }\n    })\n  }\n\n  return max\n}\n\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function (grid) {\n  let max = 0\n  for (let i = 0; i &#x3C; grid.length; i++) {\n    for (let j = 0; j &#x3C; grid[i].length; j++) {\n      if (grid[i][j]) {\n        max = Math.max(search(grid, i, j), max)\n      }\n    }\n  }\n\n  return max\n}\n</code></pre>\n<h3>DFS</h3>\n<pre><code>const DIRS = [\n  [0, 1],\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n] // top, right, bottom, left\n\nconst search = (grid, i, j) => {\n  let stack = [[i, j]]\n  grid[i][j] = 0\n\n  let count = 1\n\n  while (stack.length) {\n    const [x, y] = stack.pop()\n\n    DIRS.forEach(([_x, _y]) => {\n      let newX = x + _x\n      let newY = y + _y\n      if (grid[newX] &#x26;&#x26; grid[newX][newY]) {\n        grid[newX][newY] = 0\n        count += 1\n        stack.push([newX, newY])\n      }\n    })\n  }\n\n  return count\n}\n\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function (grid) {\n  let max = 0\n  for (let i = 0; i &#x3C; grid.length; i++) {\n    for (let j = 0; j &#x3C; grid[i].length; j++) {\n      if (grid[i][j]) {\n        max = Math.max(search(grid, i, j), max)\n      }\n    }\n  }\n\n  return max\n}\n</code></pre>\n"},"__N_SSG":true}
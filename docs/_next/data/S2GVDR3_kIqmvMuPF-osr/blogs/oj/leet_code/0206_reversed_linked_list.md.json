{"pageProps":{"blog":{"name":"0206_reversed_linked_list.md","categories":["oj","leet_code"],"content":"\n# Reverse Linked List\n\n## Description\n\n[doc](https://leetcode.com/problems/reverse-linked-list/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  if (!head) {\n    return head\n  }\n\n  let prev = null\n  let cursor = head\n\n  while (cursor.next) {\n    let next = cursor.next\n    cursor.next = prev\n\n    prev = cursor\n    cursor = next\n  }\n\n  cursor.next = prev\n  return cursor\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(1)\n\n### Refined Version\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  let prev = null\n  let cur = head\n\n  while (cur) {\n    let next = cur.next\n    cur.next = prev\n\n    prev = cur\n    cur = next\n  }\n\n  return prev\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(1)\n","meta":{"title":"Reverse Linked List","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Reverse Linked List</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/reverse-linked-list/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  if (!head) {\n    return head\n  }\n\n  let prev = null\n  let cursor = head\n\n  while (cursor.next) {\n    let next = cursor.next\n    cursor.next = prev\n\n    prev = cursor\n    cursor = next\n  }\n\n  cursor.next = prev\n  return cursor\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n<h3>Refined Version</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  let prev = null\n  let cur = head\n\n  while (cur) {\n    let next = cur.next\n    cur.next = prev\n\n    prev = cur\n    cur = next\n  }\n\n  return prev\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n"},"__N_SSG":true}
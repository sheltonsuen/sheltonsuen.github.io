{"pageProps":{"blog":{"name":"0977_squares_of_a_sorted_array.md","categories":["oj","leet_code"],"content":"\n# Squares of a Sorted Array\n\n## Description\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortedSquares = function (nums) {\n  let right = 0\n  while (nums[right] < 0) {\n    right++\n  }\n\n  for (let i = 0; i < nums.length; i++) {\n    nums[i] = nums[i] ** 2\n  }\n\n  let result = Array(nums.length)\n  let cur = 0\n  let left = right - 1\n\n  while (left >= 0 && right < nums.length) {\n    result[cur++] = nums[left] < nums[right] ? nums[left--] : nums[right++]\n  }\n\n  while (left >= 0) {\n    result[cur++] = nums[left--]\n  }\n\n  while (right < nums.length) {\n    result[cur++] = nums[right++]\n  }\n\n  return result\n}\n```\n\n-- Time Complexity: O(n)\n-- Space Complexity: O(1)\n\n## Notes\n\n```javascript\nfunction foo() {\n  let nums = [-1, -2]\n  let i = 0\n\n  // avoid using i++ in while loop for expression since it will increase unexcepted\n  while (nums[i++] < 0) {}\n  return i\n}\n// result to 3\n\nfunction foo() {\n  let nums = [-1, -2]\n  let i = 0\n\n  // use this instead\n  while (nums[i] < 0) {\n    i++\n  }\n  return i\n}\n```\n","meta":{"title":"Squares of a Sorted Array","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Squares of a Sorted Array</h1>\n<h2>Description</h2>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortedSquares = function (nums) {\n  let right = 0\n  while (nums[right] &#x3C; 0) {\n    right++\n  }\n\n  for (let i = 0; i &#x3C; nums.length; i++) {\n    nums[i] = nums[i] ** 2\n  }\n\n  let result = Array(nums.length)\n  let cur = 0\n  let left = right - 1\n\n  while (left >= 0 &#x26;&#x26; right &#x3C; nums.length) {\n    result[cur++] = nums[left] &#x3C; nums[right] ? nums[left--] : nums[right++]\n  }\n\n  while (left >= 0) {\n    result[cur++] = nums[left--]\n  }\n\n  while (right &#x3C; nums.length) {\n    result[cur++] = nums[right++]\n  }\n\n  return result\n}\n</code></pre>\n<p>-- Time Complexity: O(n)\n-- Space Complexity: O(1)</p>\n<h2>Notes</h2>\n<pre><code>function foo() {\n  let nums = [-1, -2]\n  let i = 0\n\n  // avoid using i++ in while loop for expression since it will increase unexcepted\n  while (nums[i++] &#x3C; 0) {}\n  return i\n}\n// result to 3\n\nfunction foo() {\n  let nums = [-1, -2]\n  let i = 0\n\n  // use this instead\n  while (nums[i] &#x3C; 0) {\n    i++\n  }\n  return i\n}\n</code></pre>\n"},"__N_SSG":true}
{"pageProps":{"blog":{"name":"0112_path_sum.md","categories":["oj","leet_code"],"content":"\n# Path Sum\n\n## Description\n\n[doc](https://leetcode.com/problems/path-sum/)\n\n## Solutions\n\n### Recursive Version\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (!root) {\n    return false\n  }\n\n  const leftTarget = targetSum - root.val\n  if (!leftTarget && !root.left && !root.right) {\n    return true\n  }\n\n  return hasPathSum(root.left, leftTarget) || hasPathSum(root.right, leftTarget)\n}\n\n- Time Complexity: O(n)\n- Space Complexity: O(1)\n```\n\n### DFS\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (!root) {\n    return false\n  }\n\n  const queue = [root]\n  while (queue.length) {\n    const cur = queue.shift()\n\n    const left = targetSum - cur.val\n    if (!left && !cur.left && !cur.right) {\n      return true\n    }\n\n    if (cur.left) {\n      cur.left.val += cur.val // try to make it immutable in prod\n      queue.push(cur.left)\n    }\n\n    if (cur.right) {\n      cur.right.val += cur.val\n      queue.push(cur.right)\n    }\n  }\n\n  return false\n}\n\n- Time Complexity: O(n)\n- Space Complexity: O(log(n)) ? maybe\n```\n","meta":{"title":"Path Sum","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Path Sum</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/path-sum/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>Recursive Version</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (!root) {\n    return false\n  }\n\n  const leftTarget = targetSum - root.val\n  if (!leftTarget &#x26;&#x26; !root.left &#x26;&#x26; !root.right) {\n    return true\n  }\n\n  return hasPathSum(root.left, leftTarget) || hasPathSum(root.right, leftTarget)\n}\n\n- Time Complexity: O(n)\n- Space Complexity: O(1)\n</code></pre>\n<h3>DFS</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (!root) {\n    return false\n  }\n\n  const queue = [root]\n  while (queue.length) {\n    const cur = queue.shift()\n\n    const left = targetSum - cur.val\n    if (!left &#x26;&#x26; !cur.left &#x26;&#x26; !cur.right) {\n      return true\n    }\n\n    if (cur.left) {\n      cur.left.val += cur.val // try to make it immutable in prod\n      queue.push(cur.left)\n    }\n\n    if (cur.right) {\n      cur.right.val += cur.val\n      queue.push(cur.right)\n    }\n  }\n\n  return false\n}\n\n- Time Complexity: O(n)\n- Space Complexity: O(log(n)) ? maybe\n</code></pre>\n"},"__N_SSG":true}
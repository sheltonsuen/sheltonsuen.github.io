{"pageProps":{"blog":{"name":"0002_add_two_numbers.md","categories":["oj","leet_code"],"content":"\n# Add Two Numbers\n\n## Description\n\n[original description](https://leetcode.com/problems/add-two-numbers/)\n\n## Solutions\n\n### Clear Version\n\nsimulate the calculation\n\n```javascript\nfunction ListNode(val, next) {\n  this.val = val === undefined ? 0 : val;\n  this.next = next === undefined ? null : next;\n}\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  const head = new ListNode();\n  let current = head;\n  let carry = 0;\n\n  while (l1 && l2) {\n    const sum = l1.val + l2.val + carry;\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l1 = l1.next;\n    l2 = l2.next;\n  }\n\n  while (l1) {\n    const sum = l1.val + carry;\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l1 = l1.next;\n  }\n\n  while (l2) {\n    const sum = l2.val + carry;\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l2 = l2.next;\n  }\n\n  if (carry) {\n    current.next = new ListNode(carry);\n  }\n\n  return head.next;\n};\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n\n### Merge Calculation\n\n```javascript\nfunction ListNode(val, next) {\n  this.val = val === undefined ? 0 : val;\n  this.next = next === undefined ? null : next;\n}\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  const head = new ListNode();\n  let current = head;\n  let carry = 0;\n\n  while (l1 || l2) {\n    const sum = (l1?.val ?? 0) + (l2?.val ?? 0) + carry;    // the new syntax\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l1 = l1?.next;\n    l2 = l2?.next;\n  }\n\n  if (carry) {\n    current.next = new ListNode(carry);\n  }\n\n  return head.next;\n};\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n","meta":{"title":"Add Two Numbers","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Add Two Numbers</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/add-two-numbers/\">original description</a></p>\n<h2>Solutions</h2>\n<h3>Clear Version</h3>\n<p>simulate the calculation</p>\n<pre><code>function ListNode(val, next) {\n  this.val = val === undefined ? 0 : val;\n  this.next = next === undefined ? null : next;\n}\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  const head = new ListNode();\n  let current = head;\n  let carry = 0;\n\n  while (l1 &#x26;&#x26; l2) {\n    const sum = l1.val + l2.val + carry;\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l1 = l1.next;\n    l2 = l2.next;\n  }\n\n  while (l1) {\n    const sum = l1.val + carry;\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l1 = l1.next;\n  }\n\n  while (l2) {\n    const sum = l2.val + carry;\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l2 = l2.next;\n  }\n\n  if (carry) {\n    current.next = new ListNode(carry);\n  }\n\n  return head.next;\n};\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n<h3>Merge Calculation</h3>\n<pre><code>function ListNode(val, next) {\n  this.val = val === undefined ? 0 : val;\n  this.next = next === undefined ? null : next;\n}\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  const head = new ListNode();\n  let current = head;\n  let carry = 0;\n\n  while (l1 || l2) {\n    const sum = (l1?.val ?? 0) + (l2?.val ?? 0) + carry;    // the new syntax\n    const val = sum % 10;\n    carry = Math.floor(sum / 10);\n\n    current.next = new ListNode(val);\n    current = current.next;\n    l1 = l1?.next;\n    l2 = l2?.next;\n  }\n\n  if (carry) {\n    current.next = new ListNode(carry);\n  }\n\n  return head.next;\n};\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n"},"__N_SSG":true}
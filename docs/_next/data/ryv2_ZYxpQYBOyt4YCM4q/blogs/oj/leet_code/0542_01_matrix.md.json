{"pageProps":{"blog":{"name":"0542_01_matrix.md","categories":["oj","leet_code"],"content":"\n# 01 Matrix\n\n## Description\n\n[doc](https://leetcode.com/problems/01-matrix/)\n\n## Solutions\n\n### First Idea\n\n```javascript\nconst DIRS = [\n  [0, 1],\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n]\n\nfunction searchNearestZero(mat, point) {\n  const mark = Array(mat.length)\n    .fill()\n    .map((_, i) => Array(mat[i].length))\n\n  let queue = [point]\n  mark[point[0]][point[1]] = 0\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    if (mat[x][y] === 0) {\n      return mark[x][y]\n    }\n\n    DIRS.forEach(([_x, _y]) => {\n      const newX = x + _x\n      const newY = y + _y\n\n      if (mat[newX]?.[newY] == null || mark[newX][newY] != null) {\n        return\n      }\n\n      mark[newX][newY] = mark[x][y] + 1\n      queue.push([newX, newY])\n    })\n  }\n}\n\n/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar updateMatrix = function (mat) {\n  return mat.map((v, x) => v.map((sv, y) => (sv ? searchNearestZero(mat, [x, y]) : sv)))\n}\n```\n","meta":{"title":"01 Matrix","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>01 Matrix</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/01-matrix/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>const DIRS = [\n  [0, 1],\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n]\n\nfunction searchNearestZero(mat, point) {\n  const mark = Array(mat.length)\n    .fill()\n    .map((_, i) => Array(mat[i].length))\n\n  let queue = [point]\n  mark[point[0]][point[1]] = 0\n\n  while (queue.length) {\n    const [x, y] = queue.shift()\n\n    if (mat[x][y] === 0) {\n      return mark[x][y]\n    }\n\n    DIRS.forEach(([_x, _y]) => {\n      const newX = x + _x\n      const newY = y + _y\n\n      if (mat[newX]?.[newY] == null || mark[newX][newY] != null) {\n        return\n      }\n\n      mark[newX][newY] = mark[x][y] + 1\n      queue.push([newX, newY])\n    })\n  }\n}\n\n/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar updateMatrix = function (mat) {\n  return mat.map((v, x) => v.map((sv, y) => (sv ? searchNearestZero(mat, [x, y]) : sv)))\n}\n</code></pre>\n"},"__N_SSG":true}
{"pageProps":{"blog":{"name":"0094_binary_tree_inorder_traversal.md","categories":["oj","leet_code"],"content":"\n# Binary Tree Inorder Traversal\n\n## Description\n\n[doc](https://leetcode.com/problems/binary-tree-inorder-traversal/)\n\n## Solutions\n\n### First Idea\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function (root) {\n  if (!root) {\n    return []\n  }\n\n  if (!root.left && !root.right) {\n    return [root.val]\n  }\n\n  return [\n    ...inorderTraversal(root.left),\n    root.val,\n    ...inorderTraversal(root.right),\n  ]\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n\n### Refined one\n\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function (root) {\n  if (!root) {\n    return []\n  }\n\n  return [\n    ...inorderTraversal(root.left),\n    root.val,\n    ...inorderTraversal(root.right),\n  ]\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(n)\n","meta":{"title":"Binary Tree Inorder Traversal","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Binary Tree Inorder Traversal</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/binary-tree-inorder-traversal/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function (root) {\n  if (!root) {\n    return []\n  }\n\n  if (!root.left &#x26;&#x26; !root.right) {\n    return [root.val]\n  }\n\n  return [\n    ...inorderTraversal(root.left),\n    root.val,\n    ...inorderTraversal(root.right),\n  ]\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n<h3>Refined one</h3>\n<pre><code>/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function (root) {\n  if (!root) {\n    return []\n  }\n\n  return [\n    ...inorderTraversal(root.left),\n    root.val,\n    ...inorderTraversal(root.right),\n  ]\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)</li>\n</ul>\n"},"__N_SSG":true}
{"pageProps":{"blog":{"name":"0031_next_permutation.md","categories":["oj","leet_code"],"content":"\n# Next Permutation\n\n## Description\n\n[doc](https://leetcode.com/problems/next-permutation/)\n\n## Solutions\n\n### First Idea\n\n```javascript\nfunction sortSubArrayInPlace(start, nums) {\n  for (let i = start; i < nums.length; i++) {\n    let minIdx = i\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] < nums[minIdx]) {\n        minIdx = j\n      }\n    }\n    if (minIdx !== i) {\n      let tmp = nums[minIdx]\n      nums[minIdx] = nums[i]\n      nums[i] = tmp\n    }\n  }\n}\n\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function (nums) {\n  let idx = nums.length - 1\n  while (idx > 0) {\n    if (nums[idx - 1] < nums[idx]) {\n      break\n    }\n\n    idx--\n  }\n\n  const prev = idx - 1\n  if (prev < 0) {\n    return sortSubArrayInPlace(idx, nums)\n  }\n\n  sortSubArrayInPlace(idx, nums)\n  while (idx < nums.length) {\n    if (nums[idx] > nums[prev]) {\n      break\n    }\n    idx++\n  }\n\n  const tmp = nums[idx]\n  nums[idx] = nums[prev]\n  nums[prev] = tmp\n  return nums\n}\n```\n","meta":{"title":"Next Permutation","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Next Permutation</h1>\n<h2>Description</h2>\n<p><a href=\"https://leetcode.com/problems/next-permutation/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>function sortSubArrayInPlace(start, nums) {\n  for (let i = start; i &#x3C; nums.length; i++) {\n    let minIdx = i\n    for (let j = i + 1; j &#x3C; nums.length; j++) {\n      if (nums[j] &#x3C; nums[minIdx]) {\n        minIdx = j\n      }\n    }\n    if (minIdx !== i) {\n      let tmp = nums[minIdx]\n      nums[minIdx] = nums[i]\n      nums[i] = tmp\n    }\n  }\n}\n\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function (nums) {\n  let idx = nums.length - 1\n  while (idx > 0) {\n    if (nums[idx - 1] &#x3C; nums[idx]) {\n      break\n    }\n\n    idx--\n  }\n\n  const prev = idx - 1\n  if (prev &#x3C; 0) {\n    return sortSubArrayInPlace(idx, nums)\n  }\n\n  sortSubArrayInPlace(idx, nums)\n  while (idx &#x3C; nums.length) {\n    if (nums[idx] > nums[prev]) {\n      break\n    }\n    idx++\n  }\n\n  const tmp = nums[idx]\n  nums[idx] = nums[prev]\n  nums[prev] = tmp\n  return nums\n}\n</code></pre>\n"},"__N_SSG":true}
{"pageProps":{"blog":{"name":"0236_lowest_common_ancestor_of_a_binary_tree.md","categories":["oj","leet_code"],"content":"\n# Lowest Common Ancestor of a Binary Tree\n\n## Descrition\n\n[doc](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/)\n\n## Solutions\n\n### First Idea\n\n```javascript\nfunction oneOf(p, q, ref) {\n  return ref.val === p.val || ref.val === q.val\n}\n\nfunction identical(p, q, left, right) {\n  return (\n    (left?.val === p.val && right?.val === q.val) ||\n    (left?.val === q.val && right?.val === p.val)\n  )\n}\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function (root, p, q) {\n  if (!root) {\n    return null\n  }\n\n  const left = lowestCommonAncestor(root.left, p, q)\n  const right = lowestCommonAncestor(root.right, p, q)\n\n  if (identical(p, q, left, right) || oneOf(p, q, root)) {\n    return root\n  }\n\n  return left !== null ? left : right\n}\n```\n\n- Time Complexity: O(n)\n- Space Complexity: O(1)\n","meta":{"title":"Lowest Common Ancestor of a Binary Tree","date":"Tue Feb 22 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","tags":"oj","private":false}},"html":"<h1>Lowest Common Ancestor of a Binary Tree</h1>\n<h2>Descrition</h2>\n<p><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\">doc</a></p>\n<h2>Solutions</h2>\n<h3>First Idea</h3>\n<pre><code>function oneOf(p, q, ref) {\n  return ref.val === p.val || ref.val === q.val\n}\n\nfunction identical(p, q, left, right) {\n  return (\n    (left?.val === p.val &#x26;&#x26; right?.val === q.val) ||\n    (left?.val === q.val &#x26;&#x26; right?.val === p.val)\n  )\n}\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function (root, p, q) {\n  if (!root) {\n    return null\n  }\n\n  const left = lowestCommonAncestor(root.left, p, q)\n  const right = lowestCommonAncestor(root.right, p, q)\n\n  if (identical(p, q, left, right) || oneOf(p, q, root)) {\n    return root\n  }\n\n  return left !== null ? left : right\n}\n</code></pre>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(1)</li>\n</ul>\n"},"__N_SSG":true}